/* --------------------------------------------------------

TYPE ON A MODULAR SCALE

===========================================================

A Sass toolkit that sets type in rem's, based on a modular 
scale while maintaining vertical rhythm. And as a small 
bonus pixel borders that maintain rhythm.

Release Versions: https://github.com/arjanvd/XXXX
Github: https://github.com/arjanvd/XXXXX
License: The MIT License (MIT)

Heavily inspired by and used stuff from:
https://github.com/ianrose/typesettings

-------------------------------------------------------- */



/* --------------------------------------------------------
Modular scale
===========================================================

Sass map
modularscale.com

-------------------------------------------------------- */

$ms-options: (
     ms1-4: 4,             // double octave
     ms1-3: 3,             // major twelve
     ms3-8: 2.6666666667,  // major eleventh
     ms2-5: 2.5,           // major tenth
     ms1-2: 2,             // octave
    ms8-15: 1.875,         // major seventh
    ms9-16: 1.7777777778,  // minor seventh
     ms3-5: 1.6666666667,  // major sixth
  msgolden: 1.6180339888,  // golden section
     ms5-8: 1.6,           // minor sixth
     ms2-3: 1.5,           // perfect fifth;
   ms1-sq2: 1.41421,         // augmented fourth  XXXXXXXXX NOG DOEN!
     ms3-4: 1.3333333333,  // perfect fourth
     ms4-5: 1.25,          // major third
     ms5-6: 1.2,           // minor third
     ms8-9: 1.125,         // major second
   ms15-16: 1.0666666667   // minor second
);



/* --------------------------------------------------------
Configurable variables
===========================================================

The config variables have default values that are just 
looking to be adjusted. Use this variables to customize 
your Typesettings. But be careful: with great powers comes
great responsibility.

-------------------------------------------------------- */

/* [1] */

$base-font-size: 1rem; // [1] // adjust font-size in percentages in stylesheet


/* [2] */

$base-line-height: 1.5; // [2]


/* [3] */

$base-line-multi: 4; // [3]


/* [4] The vertical grid unit, set in rem's like font-size. This is the
value that determines the baseline for our vertical rhythm. Margin, padding, and 
line-height are set to multiples of this value. */

$base-vertical-unit: $base-line-height / $base-line-multi + 0rem; // [4]


/* [5] */

$ms-ratio: ms3-4; // [5]


// Generates modular scale values in rem's. [Note] This one already goes up to eleven, but if you need more size up and/or down then add more sizes.
// [1] Base font-size in the modular scale in em's
// [2] One step down in the modular scale in em's
// [3] Two steps down in the modular scale in em's
// [4] One step up in the modular scale in em's
// [5] Two steps up in the modular scale in em's
// [6] Three steps up in the modular scale in em's
// [7] Four steps up in the modular scale in em's
// [8] Five steps up in the modular scale in em's

$ms-base:  $base-font-size; // [1]
$ms-down1: $ms-base / map-get($ms-options,$ms-ratio); // [2]
$ms-down2: $ms-down1 / map-get($ms-options,$ms-ratio); // [3]
$ms-up1:   $ms-base * map-get($ms-options,$ms-ratio); // [4]
$ms-up2:   $ms-up1 * map-get($ms-options,$ms-ratio); // [5]
$ms-up3:   $ms-up2 * map-get($ms-options,$ms-ratio); // [6]
$ms-up4:   $ms-up3 * map-get($ms-options,$ms-ratio); // [7]
$ms-up5:   $ms-up4 * map-get($ms-options,$ms-ratio); // [8]
$ms-up6:   $ms-up5 * map-get($ms-options,$ms-ratio); // [8]
$ms-up7:   $ms-up6 * map-get($ms-options,$ms-ratio); // [8]
$ms-up8:   $ms-up7 * map-get($ms-options,$ms-ratio); // [8]
$ms-up9:   $ms-up8 * map-get($ms-options,$ms-ratio); // [8]
$ms-up10:   $ms-up9 * map-get($ms-options,$ms-ratio); // [8]
$ms-up11:   $ms-up10 * map-get($ms-options,$ms-ratio); // [8]



//==============================================================================
// Mixin(s)
//==============================================================================
// Finally, the tools that you can use throughout your project to set
// all the wonderful type related stuffs.

@mixin set-type($size, $lines: $base-line-multi) {

  // generates the font-size in rem's
  font-size: $size;

  // line-height functions
  // If a line-height is specified in the mixin by setting the number of lines other than $base-line-multi, line-height is rounded to a multiple of those lines in rem's (to keep vertical rhythm)
  @if $lines != $base-line-multi {
    line-height: ((ceil($size / $base-line-height) * ($base-line-height / $size)) / $base-line-multi) * $lines;
  }
  // if the line-height is left, rounded to a multiple of $base-line-height (to keep vertical rhythm)
  @else {
    line-height: ceil($size / $base-line-height) * ($base-line-height / $size);
  }
}

// Creates a pixel width border top with padding that is a multiple of the base
// vertical grid unit. You will need to set border style and color rules.
// Necessity of interpolation of variables: http://stackoverflow.com/questions/17982111/sass-variable-in-css-calc-function
@mixin vr-border-top($border-width: 1px, $lines: $base-line-multi) {
  border-top-width: $border-width;
  padding-top: calc(#{$lines} * #{$base-vertical-unit} - #{$border-width});
}

// Creates a pixel width border bottom with padding that is a multiple of the base
// vertical grid unit. You will need to set border style and color rules.
@mixin vr-border-bottom($border-width: 1px, $lines: $base-line-multi) {
  border-bottom-width: $border-width;
  padding-bottom: calc(#{$lines} * #{$base-vertical-unit} - #{$border-width});
}

// Creates a pixel width border bottom with padding that is a multiple of the base
// vertical grid unit. You will need to set border style and color rules.
@mixin vr-border($border-top-width: 1px, $border-bottom-width: $border-top-width, $lines-top: $base-line-multi / 2, $lines-bottom: $lines-top) {
  border-top-width: $border-top-width;
  border-bottom-width: $border-bottom-width;
  padding-top: calc(#{$lines-top} * #{$base-vertical-unit} - #{$border-top-width});
  padding-bottom: calc(#{$lines-bottom} * #{$base-vertical-unit} - #{$border-bottom-width});
}

//==============================================================================
// Function(s)
//==============================================================================


// Returns an REM value that is a multiple of our defined base vertical unit. For
// example 3 becomes 1.125rem
@function vr($lines: $base-line-multi) {
  @if is-int($lines) == false {
    @warn  "#{$lines} + #{$not-integer-txt}";
  }
  @return $lines * $base-vertical-unit;
}